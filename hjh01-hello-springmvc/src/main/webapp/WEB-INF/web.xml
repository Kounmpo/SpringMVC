<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
  <!--声明，注册springmvc的核心对象DispatcherServlet
      启动后创建DispatcherServlet对象实例
      因为DispatcherServlet的创建过程中，会同时创建springmvc容器对象
      读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时就可以直接使用对象了
      servlet的初始化会执行init(),DispatcherServlet在init方法中 {
          // 创建容器,读取配置文件
          WebApplicationContext wac = new ClassPathXmlApplicationContext("springmvc.xml");
          // 将容器对象放入ServletContext中,这样就可以使用这个容器对象
          getServletContext().setAttribute(key,wac);
      }
  -->
  <servlet>
    <servlet-name>dispatcher-servlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <!--            自定义springmvc读取的配置文件位置的属性-->
      <param-name>contextConfigLocation</param-name>
      <!--            指定自定义配置文件的位置-->
      <param-value>classpath:dispatcher-servlet.xml</param-value>
    </init-param>
    <!--    在tomcat启动的时候创建servlet对象
    表示tomcat在启动后创建对象的我顺序。值为整数，数值越小，创建时间越早。
    此时启动tomcat时会报错
    Caused by: java.io.FileNotFoundException:
    Could not open ServletContext resource [/WEB-INF/dispatcher-servlet-servlet.xml]
    因为这个配置文件还没有创建，所以需要手动创建这个配置文件。这里的规则是：
    默认在/WEB-INF/<servlet-name>-servlet.xml,文件的位置是固定的,命名规则也有限制
    所以我们可以自定义配置文件的位置和命名规则
    -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcher-servlet</servlet-name>
    <!--        使用框架的时候，url-pattern可以使用两种值-->
    <!--        1.使用扩展名的方式，语法*.xxxx,如*.do *.action *.mvc等,请求以这些结尾的请求，都交给这个servlet处理-->
    <!--        2.使用/-->
    <url-pattern>/</url-pattern>
  </servlet-mapping>
</web-app>
